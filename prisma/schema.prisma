// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  language      String    @default("ar")
  theme         String    @default("system")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  studies       FeasibilityStudy[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  location    String?
  currency    String   @default("SAR")
  userId      String
  status      ProjectStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  studies FeasibilityStudy[]

  @@map("projects")
}

model FeasibilityStudy {
  id                String   @id @default(cuid())
  title             String
  description       String?
  type              StudyType
  status            StudyStatus @default(DRAFT)
  language          String   @default("ar")
  projectId         String
  userId            String
  aiModel           String   @default("gemini")
  totalCost         Float?
  expectedRevenue   Float?
  breakEvenPeriod   Int?
  roi               Float?
  npv               Float?
  irr               Float?
  riskAssessment    String?
  recommendations   String?
  executiveSummary  String?
  marketAnalysis    String?
  technicalAnalysis String?
  financialAnalysis String?
  riskAnalysis      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feasibility_studies")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum StudyType {
  TECHNICAL
  ECONOMIC
  LEGAL
  OPERATIONAL
  COMPREHENSIVE
}

enum StudyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  REVIEWED
  PUBLISHED
}
